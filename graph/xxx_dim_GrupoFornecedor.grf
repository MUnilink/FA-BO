<?xml version="1.0" encoding="UTF-8"?><Graph author="diego.guedes" created="Fri May 11 07:47:44 CDT 2018" guiVersion="3.4.4.P" id="1526048085478" licenseType="Commercial" modified="Mon May 11 08:12:41 CDT 2020" modifiedBy="diego.guedes" name="xxx_dim_GrupoFornecedor" revision="1.21" showComponentDetails="true">
<Global>
<Metadata id="Metadata21" previewAttachment="${DATA_SOURCE_DIR}/GrpFornecedor.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GrpFornecedor_Input" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="BK_GRUPO_FORNECEDOR" type="string"/>
<Field name="COD_GRUPO_FOR" type="string"/>
<Field eofAsDelimiter="false" name="DESC_GRUPO_FOR" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachment="${DATA_SOURCE_DIR}/GrpFornecedor.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="GrpFornecedor_Output" previewAttachmentCharset="ISO-8859-1" quoteChar="&quot;" quotedStrings="true" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="BK_GRUPO_FORNECEDOR" type="string"/>
<Field name="COD_GRUPO_FOR" type="string"/>
<Field eofAsDelimiter="false" name="DESC_GRUPO_FOR" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Sequence cached="8" id="Sequence0" name="SequenciaHom" start="1" step="1" type="PRIMITIVE_SEQUENCE"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="150" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="1. CARGA DO DATASET DE GRUPO DE FORNECEDOR (DIM)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="609" x="11" y="16"/>
<Dictionary/>
</Global>
<Phase number="10">
<Node charset="ISO-8859-1" enabled="enabled" fileURL="zip:(${DATA_SOURCE_DIR}/${gdc_agent_zip})#GrpFornecedor.csv*" guiName="GrpFornecedor" guiX="24" guiY="55" id="GRP_FORNECEDOR" type="DATA_READER"/>
<Node dataset="dataset.grupodofornecedor" datasetFieldMappings="{&quot;gd_dataset&quot;:{&quot;datasetId&quot;:&quot;dataset.grupodofornecedor&quot;,&quot;datasetTitle&quot;:&quot;Grupo do Fornecedor&quot;,&quot;attributes&quot;:[{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.grupodofornecedor.codigodogrupodofornecedor&quot;,&quot;title&quot;:&quot;Código do Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;attr_grupodofornecedor_codigodogrupodofornecedor&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.grupodofornecedor.codigodogrupodofornecedor&quot;,&quot;title&quot;:&quot;Código do Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;codigodogrupodofornecedor&quot;,&quot;assignedMetadataField&quot;:&quot;COD_GRUPO_FOR&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.grupodofornecedor.grupodofornecedor&quot;,&quot;title&quot;:&quot;Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;attr_grupodofornecedor_grupodofornecedor&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.grupodofornecedor.grupodofornecedor&quot;,&quot;title&quot;:&quot;Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;grupodofornecedor&quot;,&quot;assignedMetadataField&quot;:&quot;DESC_GRUPO_FOR&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}},{&quot;gd_dataset_attribute&quot;:{&quot;id&quot;:&quot;attr.grupodofornecedor.idgrupodofornecedor&quot;,&quot;title&quot;:&quot;ID Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;attr_grupodofornecedor_idgrupodofornecedor&quot;,&quot;displayForms&quot;:[{&quot;gd_dataset_attribute_display_form&quot;:{&quot;id&quot;:&quot;label.grupodofornecedor.idgrupodofornecedor&quot;,&quot;title&quot;:&quot;ID Grupo do Fornecedor&quot;,&quot;prettyId&quot;:&quot;idgrupodofornecedor&quot;,&quot;assignedMetadataField&quot;:&quot;BK_GRUPO_FORNECEDOR&quot;,&quot;type&quot;:&quot;STRING&quot;,&quot;referenceKey&quot;:true}}],&quot;assignedMetadataField&quot;:null,&quot;selectedDisplayForm&quot;:null}}],&quot;referencedAttributes&quot;:[],&quot;dateAttributes&quot;:[],&quot;simpleFacts&quot;:[],&quot;dateFacts&quot;:[],&quot;entitiesWithoutMetadata&quot;:[],&quot;unassigneddateFacts&quot;:[],&quot;entitiesWithoutValue&quot;:[],&quot;fieldsWithMetadataConflict&quot;:[],&quot;datesWithFactConflict&quot;:[]}}" enabled="enabled" guiName="Grupo do Fornecedor" guiX="449" guiY="55" id="GRUPO_DO_FORNECEDOR" mode="${LOAD_MODE_DIM}" retriesInterval="60" retriesNumber="5" type="GD_DATASET_WRITER"/>
<Node enabled="disabled" guiName="Trash" guiX="307" guiY="55" id="TRASH" type="TRASH"/>
<Node enabled="enabled" guiName="Treatment" guiX="168" guiY="55" id="TREATMENT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import "trans/lib.ctl";

// Transforms input record into output record.
function integer transform() {
	if (GOODDATA_DEMO_MODE == 'S') sequence(SequenciaHom).next();
	
	$out.0.BK_GRUPO_FORNECEDOR = $in.0.BK_GRUPO_FORNECEDOR;
	$out.0.COD_GRUPO_FOR = $in.0.COD_GRUPO_FOR;
	
	$out.0.DESC_GRUPO_FOR = formatString($in.0.DESC_GRUPO_FOR, 'GRP. FORNEC. ' + (1 + sequence(SequenciaHom).current()));
		
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="GRP_FORNECEDOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata21" outPort="Port 0 (output)" toNode="TREATMENT:0"/>
<Edge fromNode="TREATMENT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="GRUPO_DO_FORNECEDOR:0"/>
</Phase>
</Graph>
